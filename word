<!DOCTYPE html>
<html lang="zh">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>单词背诵小程序（含统计）</title>
  <script src="https://cdn.tailwindcss.com"></script>
</head>
<body class="bg-gray-100 min-h-screen">
  <div class="max-w-4xl mx-auto p-6">
    <header class="flex items-center justify-between mb-6">
      <h1 class="text-2xl font-bold">单词背诵小程序（卡片 + 统计）</h1>
      <div class="space-x-2">
        <button id="btnList" class="px-3 py-1 border rounded">单词列表</button>
        <button id="btnExport" class="px-3 py-1 bg-blue-600 text-white rounded">导出标记</button>
        <button id="btnReset" class="px-3 py-1 border rounded">清除标记</button>
      </div>
    </header>

    <main class="md:flex md:gap-6">
      <!-- 卡片区 -->
      <section id="cardArea" class="flex-1">
        <!-- 卡片会被 JS 渲染到这里 -->
      </section>

      <!-- 统计区 -->
      <aside class="w-full md:w-80 mt-6 md:mt-0">
        <div class="bg-white rounded-xl shadow p-4">
          <h2 class="font-semibold mb-2">统计</h2>
          <div class="text-sm text-gray-600 mb-4">已记住：<span id="countKnown">0</span> &nbsp; | &nbsp; 没记住：<span id="countUnknown">0</span> &nbsp; | &nbsp; 总数：<span id="countTotal">0</span></div>

          <div class="mb-3">
            <div class="h-4 bg-gray-200 rounded overflow-hidden">
              <div id="progressBar" class="h-4 bg-green-500 rounded" style="width:0%"></div>
            </div>
            <div class="text-xs text-gray-500 mt-1">进度：<span id="percent">0%</span></div>
          </div>

          <div class="mt-4">
            <button id="prevBtn" class="w-full mb-2 px-3 py-2 border rounded">上一张</button>
            <button id="nextBtn" class="w-full px-3 py-2 bg-indigo-600 text-white rounded">下一张</button>
          </div>

          <div class="mt-4 text-xs text-gray-500">提示：可以使用“上一张/下一张”或键盘左右键翻页。</div>
        </div>
      </aside>
    </main>

    <!-- 单词列表模态 -->
    <div id="modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center">
      <div class="bg-white w-11/12 md:w-3/4 max-w-3xl rounded-lg p-4">
        <div class="flex justify-between items-center mb-3">
          <h3 class="font-semibold">单词列表（点击可切换已记住/没记住）</h3>
          <button id="closeModal" class="text-gray-600">关闭</button>
        </div>
        <div id="listArea" class="max-h-64 overflow-auto"></div>
      </div>
    </div>

  </div>

  <script>
    // 单词数据（从图片提取的例句）
    const words = [
      { term: "sign", phonetic: "/saɪn/", sentence: "New signs at the Pentagon proclaim Pete Hegseth 'Secretary of War' yesterday..." },
      { term: "Pentagon", phonetic: "/ˈpɛntəɡən/", sentence: "New signs at the Pentagon proclaim Pete Hegseth..." },
      { term: "proclaim", phonetic: "/prəˈkleɪm/", sentence: "New signs at the Pentagon proclaim Pete Hegseth 'Secretary of War'..." },
      { term: "Secretary of War", phonetic: "/ˈsɛkrətɛri əv wɔːr/", sentence: "...proclaim Pete Hegseth 'Secretary of War'..." },
      { term: "Department of Defense", phonetic: "/dɪˈpɑːrtmənt əv dɪˈfɛns/", sentence: "...Trump ordered the Department of Defense to be renamed the Department of War..." },
      { term: "revert", phonetic: "/rɪˈvɜːrt/", sentence: "...reverting to a title it held before 1949 (76 years ago)." },
      { term: "officials", phonetic: "/əˈfɪʃəlz/", sentence: "Officials made the change after World War II to emphasize preventing conflict." },
      { term: "make the change", phonetic: "/meɪk ðə tʃeɪndʒ/", sentence: "Officials made the change after World War II to emphasize preventing conflict." },
      { term: "prevent", phonetic: "/prɪˈvɛnt/", sentence: "Officials made the change after World War II to emphasize preventing conflict." },
      { term: "conflict", phonetic: "/ˈkɒnflɪkt/", sentence: "Officials made the change after World War II to emphasize preventing conflict." },
      { term: "strength", phonetic: "/strɛŋθ/", sentence: "\"I think it sends a message of victory ... a message of strength,\" Trump said." },
      { term: "send", phonetic: "/sɛnd/", sentence: "\"I think it sends a message of victory ...\"" },
      { term: "Department of War", phonetic: "/dɪˈpɑːrtmənt əv wɔːr/", sentence: "...to be renamed the Department of War — reverting to a title it held before 1949." },

      { term: "Tylenol", phonetic: "/ˈtaɪləˌnɒl/", sentence: "Robert F. Kennedy Jr. plans to announce that pregnant women's Tylenol use ... are potentially linked to autism." },
      { term: "folate", phonetic: "/ˈfoʊleɪt/", sentence: "...pregnant women's Tylenol use and folate deficiencies are potentially linked to autism." },
      { term: "deficiencies", phonetic: "/dɪˈfɪʃənsiz/", sentence: "...folate deficiencies are potentially linked to autism." },
      { term: "potentially", phonetic: "/pəˈtɛnʃəli/", sentence: "...are potentially linked to autism." },
      { term: "according to people familiar with the matter", phonetic: "/əˈkɔːrdɪŋ tuː ˈpiːpəl fəˈmɪljər wɪð ðə ˈmætər/", sentence: "...according to people familiar with the matter." },
      { term: "suggest", phonetic: "/səˈdʒɛst/", sentence: "The report will also suggest a medicine derived from folate can treat autism symptoms." },
      { term: "medicine", phonetic: "/ˈmɛdɪsɪn/", sentence: "The report will also suggest a medicine derived from folate can treat autism symptoms." },
      { term: "autism", phonetic: "/ˈɔːtɪzəm/", sentence: "...are potentially linked to autism." },
      { term: "derive from", phonetic: "/dɪˈraɪv frəm/", sentence: "...a medicine derived from folate can treat autism symptoms." },
      { term: "symptom", phonetic: "/ˈsɪmptəm/", sentence: "a medicine derived from folate can treat autism symptoms." },
      { term: "rigorous", phonetic: "/ˈrɪɡərəs/", sentence: "Scientists say conducting rigorous autism research can take years;" },
      { term: "contributor", phonetic: "/kənˈtrɪbjətər/", sentence: "...a variety of possible contributors have been identified." },
      { term: "obstetrician", phonetic: "/ˌɒbstəˈtrɪʃən/", sentence: "The American College of Obstetricians and Gynecologists says Tylenol is safe..." },
      { term: "gynecologist", phonetic: "/ˌɡaɪnəˈkɒlədʒɪst/", sentence: "The American College of Obstetricians and Gynecologists says Tylenol is safe..." },
      { term: "deny", phonetic: "/dɪˈnaɪ/", sentence: "Tylenol maker Kenvue denied any causal link between the drug and autism." },
      { term: "causal", phonetic: "/ˈkɔːzəl/", sentence: "Kenvue denied any causal link between the drug and autism." },
      { term: "as with all drugs", phonetic: "/æz wɪð ɔːl drʌɡz/", sentence: "...pregnant women consult with their doctors, as with all drugs." },

      { term: "major immigration", phonetic: "/ˈmeɪdʒər ˌɪmɪˈɡreɪʃən/", sentence: "major immigration raid Georgia immigration authorities ..." },
      { term: "raid", phonetic: "/reɪd/", sentence: "major immigration raid" },
      { term: "Georgia", phonetic: "/ˈdʒɔːrdʒə/", sentence: "raid Georgia immigration authorities" },
      { term: "immigration authorities", phonetic: "/ˌɪmɪˈɡreɪʃən əˈθɔːrɪtiz/", sentence: "Georgia immigration authorities ..." },
      { term: "construction site", phonetic: "/kənˈstrʌkʃən saɪt/", sentence: "...construction site ..." },
      { term: "diplomatic", phonetic: "/ˌdɪpləˈmætɪk/", sentence: "diplomatic tension" },
      { term: "tension", phonetic: "/ˈtɛnʃən/", sentence: "diplomatic tension" },
      { term: "ally", phonetic: "/ˈælaɪ/", sentence: "ally" },
      { term: "plant", phonetic: "/plænt/", sentence: "plant" },
      { term: "billion", phonetic: "/ˈbɪljən/", sentence: "...billion ..." },
      { term: "electric", phonetic: "/ɪˈlɛktrɪk/", sentence: "electric LG Energy Solution vehicle" },
      { term: "LG Energy Solution", phonetic: "/ˌɛl ˈdʒi ˈɛnərdʒi səˈluːʃən/", sentence: "LG Energy Solution" },
      { term: "vehicle", phonetic: "/ˈviːəkəl/", sentence: "electric LG Energy Solution vehicle" },
      { term: "Hyundai Motor Group", phonetic: "/ˈhʌndeɪ ˈmoʊtər ˌɡruːp/", sentence: "Hyundai Motor Group" },
      { term: "republican", phonetic: "/rɪˈpʌblɪkən/", sentence: "republican governor" },
      { term: "governor", phonetic: "/ˈɡʌvərnər/", sentence: "republican governor" },
      { term: "tout", phonetic: "/taʊt/", sentence: "governor tout economic development" },
      { term: "economic development", phonetic: "/ˌɛkəˈnɒmɪk dɪˈvɛləpmənt/", sentence: "governor tout economic development" }
    ];

    const STORAGE_KEY = "rememberedWords";
    let current = 0;
    let remembered = JSON.parse(localStorage.getItem(STORAGE_KEY) || "{}");

    // DOM elements
    const cardArea = document.getElementById('cardArea');
    const countKnown = document.getElementById('countKnown');
    const countUnknown = document.getElementById('countUnknown');
    const countTotal = document.getElementById('countTotal');
    const progressBar = document.getElementById('progressBar');
    const percentEl = document.getElementById('percent');
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const btnList = document.getElementById('btnList');
    const modal = document.getElementById('modal');
    const closeModal = document.getElementById('closeModal');
    const listArea = document.getElementById('listArea');
    const btnExport = document.getElementById('btnExport');
    const btnReset = document.getElementById('btnReset');

    function updateStats() {
      const total = words.length;
      const known = Object.values(remembered).filter(v => v === 'known').length;
      const unknown = Object.values(remembered).filter(v => v === 'unknown').length;
      const percent = Math.round((known / total) * 100);

      countTotal.textContent = total;
      countKnown.textContent = known;
      countUnknown.textContent = unknown;
      progressBar.style.width = percent + "%";
      percentEl.textContent = percent + "%";
    }

    function speak(text) {
      if (!window.speechSynthesis) return;
      const u = new SpeechSynthesisUtterance(text);
      u.lang = 'en-US';
      window.speechSynthesis.cancel();
      window.speechSynthesis.speak(u);
    }

    function renderCard() {
      const w = words[current];
      cardArea.innerHTML = '';
      const card = document.createElement('div');
      card.className = 'bg-white shadow-xl rounded-2xl p-8 max-w-2xl w-full text-center';

      const title = document.createElement('h2');
      title.className = 'text-3xl font-bold mb-2';
      title.textContent = w.term;

      const phon = document.createElement('p');
      phon.className = 'text-gray-500 mb-4';
      phon.textContent = w.phonetic;

      const sent = document.createElement('p');
      sent.className = 'italic mb-6 text-left';
      sent.textContent = w.sentence;

      const btns = document.createElement('div');
      btns.className = 'flex justify-center gap-4';

      const knownBtn = document.createElement('button');
      knownBtn.className = 'bg-green-500 text-white px-4 py-2 rounded-xl shadow hover:bg-green-600';
      knownBtn.textContent = '已记住';
      knownBtn.onclick = () => markWord('known');

      const unknownBtn = document.createElement('button');
      unknownBtn.className = 'bg-red-500 text-white px-4 py-2 rounded-xl shadow hover:bg-red-600';
      unknownBtn.textContent = '没记住';
      unknownBtn.onclick = () => markWord('unknown');

      const speakBtn = document.createElement('button');
      speakBtn.className = 'mt-4 text-blue-600 underline';
      speakBtn.textContent = '🔊 播放发音';
      speakBtn.onclick = () => speak(w.term + '. ' + w.sentence);

      const navInfo = document.createElement('div');
      navInfo.className = 'mt-4 text-gray-600';
      navInfo.textContent = `${current + 1} / ${words.length}`;

      btns.appendChild(knownBtn);
      btns.appendChild(unknownBtn);
      card.appendChild(title);
      card.appendChild(phon);
      card.appendChild(sent);
      card.appendChild(btns);
      card.appendChild(speakBtn);
      card.appendChild(navInfo);

      cardArea.appendChild(card);
      updateStats();
    }

    function markWord(status) {
      remembered[words[current].term] = status;
      localStorage.setItem(STORAGE_KEY, JSON.stringify(remembered));
      // 自动跳到下一张
      if (current < words.length - 1) current++;
      else current = 0;
      renderCard();
    }

    prevBtn.addEventListener('click', () => {
      if (current > 0) current--;
      else current = words.length -1;
      renderCard();
    });

    nextBtn.addEventListener('click', () => {
      if (current < words.length - 1) current++;
      else current = 0;
      renderCard();
    });

    // 键盘支持 左右
    window.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowRight') nextBtn.click();
      if (e.key === 'ArrowLeft') prevBtn.click();
    });

    // 列表模态相关
    btnList.addEventListener('click', () => {
      renderList();
      modal.classList.remove('hidden');
      modal.classList.add('flex');
    });
    closeModal.addEventListener('click', () => {
      modal.classList.add('hidden');
      modal.classList.remove('flex');
    });

    function renderList() {
      listArea.innerHTML = '';
      words.forEach((w, idx) => {
        const row = document.createElement('div');
        row.className = 'flex items-center justify-between p-2 border-b';

        const left = document.createElement('div');
        left.innerHTML = `<div class='font-medium'>${w.term}</div><div class='text-xs text-gray-500'>${w.phonetic}</div>`;
        left.style.cursor = 'pointer';
        left.onclick = () => { current = idx; renderCard(); modal.classList.add('hidden'); };

        const status = remembered[w.term];
        const right = document.createElement('div');
        const toggleBtn = document.createElement('button');
        toggleBtn.className = 'px-2 py-1 border rounded text-sm';
        toggleBtn.textContent = status === 'known' ? '已记住' : status === 'unknown' ? '没记住' : '未标记';
        toggleBtn.onclick = () => {
          const next = remembered[w.term] === 'known' ? 'unknown' : 'known';
          remembered[w.term] = next;
          localStorage.setItem(STORAGE_KEY, JSON.stringify(remembered));
          renderList();
          updateStats();
        };
        right.appendChild(toggleBtn);

        row.appendChild(left);
        row.appendChild(right);
        listArea.appendChild(row);
      });
    }

    // 导出已标记（known/unknown）
    btnExport.addEventListener('click', () => {
      const entries = Object.entries(remembered).map(([k,v]) => `${k}\t${v}`).join('\n');
      const blob = new Blob([entries], {type: 'text/plain;charset=utf-8'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'vocab_marks.txt';
      document.body.appendChild(a);
      a.click();
      a.remove();
      URL.revokeObjectURL(url);
    });

    // 清除标记
    btnReset.addEventListener('click', () => {
      if (!confirm('确认要清除所有记忆标记吗？')) return;
      remembered = {};
      localStorage.removeItem(STORAGE_KEY);
      renderCard();
    });

    // 初始渲染
    renderCard();
  </script>
</body>
</html>
